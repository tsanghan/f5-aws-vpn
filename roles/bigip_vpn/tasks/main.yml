---
# ---------------------------------
# Configure VPN Device specific config
# ---------------------------------



- name: Create ZebOS.conf from template
  delegate_to: localhost
  template: src=../roles/bigip_vpn/templates/zebos.cfg.j2 dest=../cache/{{ env_tag }}/{{inventory_hostname}}_ZebOS.conf

- name: Copy over ZebOS.conf
  copy: src=../cache/{{ env_tag }}/{{inventory_hostname}}_ZebOS.conf dest=/config/zebos/rd0/ZebOS.conf

- name: Enable Dynamic Routing
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ ansible_ssh_host }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_password }}
    collection_path='mgmt/tm/net/route-domain'
    resource_key="name"
    payload='{
              "name":"0",
              "partition":"Common",
              "routingProtocol":["BGP"]
            }'

# NOTE: AWS lifetime given in seconds so have to convert lifetime to minutes for bigip iControl Rest
# http://jinja.pocoo.org/docs/dev/templates/

- name: Adding IKE Peers
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ ansible_ssh_host }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_password }}
    collection_path='mgmt/tm/net/ipsec/ike-peer'
    resource_key="name"
    payload='{
              "name":"aws_vpn_{{ connection }}_peer_{{ item.0 + 1 }}",
              "partition":"Common",
              "lifetime":"{{ (item.1.ike.lifetime|int / 60)| int | string }}",
              "myIdType":"address",
              "peersIdType":"address",
              "phase1AuthMethod":"pre-shared-key",
              "phase1EncryptAlgorithm":"aes128",
              "presharedKey":"{{ item.1.ike.pre_shared_key }}",
              "remoteAddress":"{{ item.1.vpn_gateway.tunnel_outside_address.ip_address }}",
              "verifyCert":"true",
              "version":["v1"]
            }'
  with_indexed_items: customer_gateway_config.vpn_connection.ipsec_tunnel


- name: Adding AWS IPSEC POLICY
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ ansible_ssh_host }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_password }}
    collection_path='mgmt/tm/net/ipsec/ipsec-policy'
    resource_key="name"
    payload='{
              "name":"AWS_IPSEC_Interface_Policy",
              "partition":"Common",
              "ikePhase2AuthAlgorithm":"sha1",
              "ikePhase2EncryptAlgorithm":"aes128",
              "ikePhase2Lifetime":"60",
              "ikePhase2PerfectForwardSecrecy":"modp1024",
              "mode":"interface"
            }'


#Using IPADDR FILTER TO GET SUBNET FROM HOST ADDRESS
#https://github.com/ansible/ansible/blob/f34b55ac2bcfd71640b3db91f3c4e177f723cd03/lib/ansible/plugins/filter/ipaddr.py

- name: Adding Traffic Selectors 
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ ansible_ssh_host }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_password }}
    collection_path='mgmt/tm/net/ipsec/traffic-selector'
    resource_key="name"
    payload='{
              "name":"aws_{{ connection }}_tun_{{ item.0 + 1 }}_selector",
              "partition":"Common",
              "sourceAddress":"{{ item.1.vpn_gateway.tunnel_inside_address.ip_address | ipsubnet(item.1.vpn_gateway.tunnel_inside_address.network_cidr) }}",
              "destinationAddress":"{{ item.1.vpn_gateway.tunnel_inside_address.ip_address | ipsubnet(item.1.vpn_gateway.tunnel_inside_address.network_cidr) }}",
              "ipsecPolicy":"/Common/AWS_IPSEC_Interface_Policy"
            }'
  with_indexed_items: customer_gateway_config.vpn_connection.ipsec_tunnel


- name: Adding IPSEC PROFILE TO CONN TUNNEL
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ ansible_ssh_host }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_password }}
    collection_path='mgmt/tm/net/tunnels/ipsec'
    resource_key="name"
    payload='{
              "name":"aws_{{ connection }}_tun_{{ item.0 + 1 }}_profile",
              "partition":"Common",
              "defaultsFrom":"/Common/ipsec",
              "trafficSelector":"/Common/aws_{{ connection }}_tun_{{ item.0 + 1 }}_selector"
            }'
  with_indexed_items: customer_gateway_config.vpn_connection.ipsec_tunnel

- name: Adding tunnels for VPN Connections
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ ansible_ssh_host }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_password }}
    collection_path='mgmt/tm/net/tunnels/tunnel'
    resource_key="name"
    payload='{
              "name":"aws_{{ connection }}_tun_{{ item.0 + 1 }}",
              "partition":"Common",
              "localAddress":"{{ item.1.customer_gateway.tunnel_outside_address.ip_address }}",
              "remoteAddress":"{{ item.1.vpn_gateway.tunnel_outside_address.ip_address }}",
              "mtu":"1436",
              "profile":"/Common/aws_{{ connection }}_tun_{{ item.0 + 1 }}_profile"
            }'
  with_indexed_items: customer_gateway_config.vpn_connection.ipsec_tunnel


- name: Adding SELF-IPs to TUNNELS
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ ansible_ssh_host }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_password }}
    collection_path='mgmt/tm/net/self'
    resource_key="name"
    payload='{
              "name":"{{ item.1.customer_gateway.tunnel_inside_address.ip_address }}",
              "partition":"Common",
              "address":"{{ item.1.customer_gateway.tunnel_inside_address.ip_address }}/{{ item.1.customer_gateway.tunnel_inside_address.network_cidr }}",
              "trafficGroup":"/Common/traffic-group-local-only",
              "allowService":"all",
              "vlan":"/Common/aws_{{ connection }}_tun_{{ item.0 + 1 }}"
            }'
  with_indexed_items: customer_gateway_config.vpn_connection.ipsec_tunnel

- name: Create VPN Connection Monitoring Pool
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ ansible_ssh_host }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_password }}
    collection_path='mgmt/tm/ltm/pool'
    resource_key="name"
    payload='{
              "name":"aws_{{ connection }}_keep_alive_pool",
              "partition":"Common",
              "members":[
              {"name":"{{customer_gateway_config.vpn_connection.ipsec_tunnel[0].vpn_gateway.tunnel_inside_address.ip_address}}:179",
              "address":"{{customer_gateway_config.vpn_connection.ipsec_tunnel[0].vpn_gateway.tunnel_inside_address.ip_address}}"}, 
              {"name":"{{customer_gateway_config.vpn_connection.ipsec_tunnel[1].vpn_gateway.tunnel_inside_address.ip_address}}:179",
              "address":"{{customer_gateway_config.vpn_connection.ipsec_tunnel[1].vpn_gateway.tunnel_inside_address.ip_address}}"}
              ], 
              "monitor":"tcp_half_open and gateway_icmp"
            }'

# Below = Optional 
- name: Create HA Group
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ ansible_ssh_host }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_password }}
    collection_path='mgmt/tm/sys/ha-group'
    resource_key="name"
    payload='{
              "name":"vpn_{{ connection }}_up",
              "activeBonus":10,
              "pools":[
                {
                  "name":"aws_{{ connection }}_keep_alive_pool",
                  "threshold":1,
                  "weight":10
                }
              ]
            }'


- name: Modify Traffic-Group-1 to use HA-Group
  delegate_to: localhost
  bigip_config:
    state=present
    host={{ ansible_ssh_host }}
    user={{ bigip_rest_user }}
    password={{ bigip_rest_password }}
    collection_path='mgmt/tm/cm/traffic-group'
    resource_key="name"
    payload='{
              "name":"traffic-group-1",
              "partition":"Common",
              "haGroup":"vpn_{{ connection }}_up"
            }'



